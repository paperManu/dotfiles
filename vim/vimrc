syntax on
set nocompatible
set laststatus=2
set linebreak
set nonumber
set expandtab
set tabstop=4
set guioptions=t
set autochdir
set autoindent
set nowrap
set hlsearch
set guifont=Hack\ 9.5
set wildmenu
set undofile
set undodir=/home/manu/.vimundo/
set scrolloff=5
set display+=lastline
set virtualedit=block
set mouse=a " Mouse scroll
ino jj <Esc> 

let mapleader=","

" Activate the man pages using :Man
runtime ftplugin/man.vim

" Force some syntax highlight
au BufRead,BufNewFile *.md.html set filetype=markdown

"-------------"
" Javascript
autocmd Filetype javascript set tabstop=4

"-------------"
" Folding settings
set foldmethod=syntax
set foldnestmax=10
set nofoldenable
set foldlevel=1

" Used to setup Vundle
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"-------------"
" Plugins
Plugin 'gmarik/vundle'
Plugin 'Shougo/vimproc.vim'

" Completion
Plugin 'Shougo/deoplete.nvim'
Plugin 'roxma/nvim-yarp'
Plugin 'roxma/vim-hug-neovim-rpc'

" Git stuff
Plugin 'tpope/vim-fugitive'
Plugin 'junegunn/gv.vim'

" Theme
Plugin 'altercation/vim-colors-solarized'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'majutsushi/tagbar'

" Usage
Plugin 'vim-scripts/a.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'mbbill/undotree'
Plugin 'tpope/vim-vinegar'
Plugin 'tpope/vim-unimpaired'
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

" Code highlight / format
Plugin 'rhysd/vim-clang-format'
Plugin 'tikhomirov/vim-glsl'
Plugin 'w0rp/ale'
Plugin 'soramugi/auto-ctags.vim'
Plugin 'cespare/vim-toml'

" Miscellaneous
Plugin 'Konfekt/FastFold'
Plugin 'vimwiki/vimwiki'

filetype plugin on

"-------------"
" Shortcuts
nnoremap <F6> :UndotreeToggle \| UndotreeFocus<CR>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nmap sn :lnext<CR>
nmap sp :lprevious<CR>
nmap cn :cn<CR>
nmap cp :cp<CR>

"-------------"
" Theme
set background=dark
colorscheme solarized

"-------------"
" Latex related configuration
set grepprg=grep\ -nH\ $*i
let g:tex_flavor='latex'
let g:tex_conceal=''

"-------------"
" Airline
"let g:airline_section_warning=''
let g:airline_powerline_fonts=1
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#wordcount#enabled = 1
let g:airline#extensions#wordcount#filetypes = ['tex', 'md']
let g:airline_theme='solarized'

"-------------"
" Tagbar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_autoclose=0
set tags^=.git/tags;tags;~

" Open definition in another split (horizontal or vertical)
map <C-\> :split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

"-------------"
" auto-ctags.vim
let g:auto_ctags = 0
let g:auto_ctags_search_recursively = 1
let g:auto_ctags_directory_list = ['.git']
let g:auto_ctags_tags_name = 'tags'
let g:auto_ctags_tags_args = ['--tag-relative=yes', '--recurse=yes', '--sort=yes', '--append=yes']

"-------------"
" a.vim
let g:alternateSearchPath = 'reg:#\<src\>$#include#,reg:#\<include\>$#src#'

"-------------"
" CtrlP
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_switch_buffer = 'et'
let g:ctrlp_lazy_update = 100
nnoremap <leader><C-P> :CtrlPTag<cr>

"-------------"
" vim-clang-format
let g:clang_format#style_options = {
    \ "BasedOnStyle" : "LLVM",
    \ "AlignTrailingComments" : "true",
    \ "AlwaysBreakTemplateDeclarations" : "true",
    \ "AlignAfterOpenBracket" : "DontAlign",
    \ "AllowShortFunctionsOnASingleLine" : "Inline",
    \ "BinPackArguments" : "false",
    \ "BinPackParameters" : "false",
    \ "BreakBeforeBraces" : "Allman",
    \ "ColumnLimit" : 180,
    \ "IndentWidth" : 4,
    \ "PointerAlignment" : "Left",
    \ "Standard" : "Cpp11",
    \ "TabWidth" : 4}
autocmd FileType c,cpp ClangFormatAutoDisable

"-------------"
" deoplete
let g:deoplete#enable_at_startup = 1
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
autocmd FileType vimwiki call deoplete#custom#buffer_option('auto_complete', v:false)
autocmd FileType latex call deoplete#custom#buffer_option('auto_complete', v:false)

"-------------"
" ale
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_linters = {
\   'python': ['flake8', 'mypy'],
\   'javascript': ['eslint'],
\   'rust': ['cargo', 'rls']
\}
let g:ale_python_flake8_options = '--ignore=E501,E225'
let g:ale_cpp_clangtidy_checks = ['performance-*', 'portability-*', 'hicpp-*', 'cppcoreguidelines-*', 'bugprone-*']
let g:ale_cpp_clang_options = '-std=c++17'
let g:ale_cpp_gcc_options = '-std=c++17'
let g:ale_cpp_cppcheck_options = '--enable=style'
let g:ale_rust_rls_toolchain = 'stable'

"-------------"
" FastFold
nmap zuz <Plug>(FastFoldUpdate)
let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']

"-------------"
" vinegar
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_list_hide = '.*.swp,.*.so'

"-------------"
" vimwiki
let g:vimwiki_list = [{'path': '~/Sync/vimwiki',
                     \ 'nested_syntaxes': {'python': 'python', 'c++': 'cpp'}}]
let g:vimwiki_folding = 'expr'
let g:vimwiki_global_ext = 0
au FileType vimwiki setlocal shiftwidth=2 tabstop=2

"-------------"
" Some project-specific configuration
" ------------"
let $MYPYPATH.="/home/manu/src/EditionInSitu/extlib/py-satlib:/home/manu/src/EditionInSitu/extlib/py-satmath:/home/manu/src/EditionInSitu/extlib/py-satnet:/usr/local/lib/python3/dist-packages:/usr/local/lib/python3.6/dist-packages"
let $PYTHONPATH.="/home/manu/src/EditionInSitu/extlib/py-satlib:/home/manu/src/EditionInSitu/extlib/py-satmath:/home/manu/src/EditionInSitu/extlib/py-satnet:/usr/local/lib/python3/dist-packages:/usr/local/lib/python3.6/dist-packages"

"-------------"
" A few more commands
"-------------"
command -nargs=1 Toilet read !toilet --font future "<args>"

function! CloseHiddenBuffers()
    " Tableau pour memoriser la visibilite des buffers                                                                                      
    let visible = {}
    " Pour chaque onglet...
    for t in range(1, tabpagenr('$'))
        " Et pour chacune de ses fenetres...
        for b in tabpagebuflist(t)
            " On indique que le buffer est visible.
            let visible[b] = 1
        endfor
    endfor
    " Pour chaque numero de buffer possible...
    for b in range(1, bufnr('$'))
        " Si b est un numero de buffer valide et qu'il n'est pas visible, on le
        " supprime.
        if bufexists(b) && !has_key(visible, b)
            " On ferme donc tous les buffers qui ne valent pas 1 dans le tableau et qui
            " sont pourtant charges en memoire.
            execute 'bwipeout' b
        endif
    endfor
endfun
command -nargs=? CloseHiddenbuffers call CloseHiddenBuffers()

" Change font size
function! SmallFont()
    set guifont=Hack\ 9.0
endfun
command -nargs=? SmallFont call SmallFont()
noremap <leader><C-S> :SmallFont<cr>

function! BigFont()
    set guifont=Hack\ 10.5
endfun
command -nargs=? BigFont call BigFont()
noremap <leader><C-B> :BigFont<cr>
